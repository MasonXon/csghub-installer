# Default values for csghub.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
global:

  ## This section is for configuring image pull secrets.
  ## Image pull secrets are used to pull Docker images from private repositories.
  ## You can specify multiple secrets if necessary.
  imagePullSecrets: []

  ## Ingress configuration section
  ## This section allows you to configure ingress settings for your deployment.
  ## Ingress exposes HTTP and HTTPS routes from outside the cluster to services within the cluster.
  ## Traffic routing is controlled by rules defined on the ingress resource.
  ingress:
    enabled: true
    className: "nginx"
    namespace: "test"

    ## External configuration section
    ## This section allows you to configure external access settings.
    ## Here, you can specify the host (domain) and port for external access to your deployment.
    ## Note: The 'external' settings override the 'server' settings for domain and port.
    external:
      ## The host (domain) name for external access
      host: csghub.msens.cn
      ## The port number for external access

    service: &service
      type: NodePort
      nodePorts:
        http: 30080
        https: 30443
        tcp: &tcp
          2222: 32222

    tls:
      enabled: false
      verify: false
      autoGenerated: false
      secretName: ""
      caSecretName: ""
    annotations: {}

  ## Server configuration section
  ## This section allows you to configure the server settings for your deployment.
  ## You can specify the service type, port, and other relevant settings to ensure
  ## your server operates according to your requirements.
  server:
    ## Server configuration section
    ## This section allows you to configure the server settings for your deployment.
    enabled: true

    ## Number of server instances to deploy for handling incoming requests
    replicas: 1

    image:
      ## The Docker image repository
      repository: registry.cn-beijing.aliyuncs.com/opencsg_public/csghub_server
      ## The specific image tag to use
      tag: "v0.5.0"
      ## The image pull policy
      pullPolicy: "IfNotPresent"
      ## List of secrets used to pull images from private repositories
      # pullSecret: [ ]

    service:
      ## The type of service to expose
      type: ClusterIP
      ## The port on which the server service is exposed
      port: 8080

    postgresql:
      ### PostgreSQL database connection configuration
      ## The hostname or IP address of the PostgreSQL server
      # host: ""
      ## The port on which the PostgreSQL server is listening
      port: 5432
      ## The username used to authenticate with the PostgreSQL server
      # user: ""
      ## The password used to authenticate with the PostgreSQL server
      # password: ""
      ## The name of the database to connect to on the PostgreSQL server
      # database: ""

    ## Configuration for S3 storage connection
    ## Server can use S3 (or compatible) storage for repository data. Configure your S3 connection details here.
    ## Uncomment and fill in your S3 storage details.
    objectStorage: { }
    #   type: ""
    #   endpoint: ""
    #   accessKey: ""
    #   accessSecret: ""
    #   bucket: ""
    #   region: ""

  ## Portal configuration section
  ## This section is dedicated to configuring the portal component of your deployment.
  ## The portal serves as the front-end user interface, facilitating user interaction with your application.
  portal:
    enabled: true

    ## Number of portal replicas to deploy for handling incoming traffic and ensuring high availability.
    replicas: 1

    image:
      ## The repository where the portal image is stored.
      repository: registry.cn-beijing.aliyuncs.com/opencsg_public/csghub_portal
      ## The specific version tag of the portal image to use.
      tag: "v0.5.0"
      ## The pull policy for the portal image, specifying when to pull the image from the repository.
      pullPolicy: "IfNotPresent"
      ## Secrets used to pull images from a private repository. Leave empty if not required.
      pullSecret: [ ]

    ## Configuration for the PostgreSQL database connection.
    postgresql:
      ## The hostname or IP address of the PostgreSQL server.
      # host: ""
      ## The port on which the PostgreSQL server is listening.
      port: 5432
      ## The username for authenticating with the PostgreSQL database.
      # user: ""
      ## The password for authenticating with the PostgreSQL database.
      # password: ""
      ## The name of the database to use within the PostgreSQL server.
      # database: ""

    ## Configuration for S3 storage connection
    ## Portal can use S3 (or compatible) storage for repository data. Configure your S3 connection details here.
    ## Uncomment and fill in your S3 storage details.
    objectStorage: {}
    #   type: ""
    #   endpoint: ""
    #   accessKey: ""
    #   accessSecret: ""
    #   bucket: ""
    #   region: ""

  ## Runner configuration section
  ## This section is dedicated to configuring the runner settings for your deployment.
  ## Runners are components that execute your jobs and send the results back to your application.
  runner:
    ## Enable or disable the runner feature
    enabled: true

    ## Number of runner replicas to deploy for handling jobs
    replicas: 1

    image:
      ## The repository where the runner image is stored
      repository: registry.cn-beijing.aliyuncs.com/opencsg_public/csghub_server
      ## The tag of the runner image to use
      tag: "v0.5.0"
      ## The pull policy for the runner image
      ## Determines when the image should be pulled from the repository
      pullPolicy: "IfNotPresent"
      ## Image pull secrets, if required, for accessing private image repositories
      pullSecret: [ ]

    ## Kubernetes namespace where the builder component will be deployed
    namespace: space

    service:
      ## The type of service to expose the runner
      ## ClusterIP exposes the service on a cluster-internal IP
      type: ClusterIP
      ## The port on which the runner service is exposed within the cluster
      port: 8082

    ## .kube/config
    kubeConfig: |
      apiVersion: v1
      clusters:
        - cluster:
            certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURCVENDQWUyZ0F3SUJBZ0lJZmZqUGE1Nk9SUTR3RFFZSktvWklodmNOQVFFTEJRQXdGVEVUTUJFR0ExVUUKQXhNS2EzVmlaWEp1WlhSbGN6QWVGdzB5TkRBM01UZ3dPREV4TkRoYUZ3MHpOREEzTVRZd09ERTJORGhhTUJVeApFekFSQmdOVkJBTVRDbXQxWW1WeWJtVjBaWE13Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLCkFvSUJBUURDRDZIdml4RTFCTXQwS3kxRXo4WVZkSHNKcnpTNnhUZE9xeXZVdkRJU2l5ZDVGVzNtWXVVbkg4MVkKMFUxaVhVRFNTM0lwVFJ2OUlRYzNuK2kzL203T3lPZnlHVnpKTHhVMFJKaUlvSjNsT2gwaGVUYnlOZU9LL1NuaQo2clFoWW81dENWRnlGQXdGZlF1S1g0NWJwTGZPeGhnK3lHbzJpckxJdVdyWFlSZjk2bHAxMnN2bTZtYUdTRERDCnZEcS9QZlRMZ2J1U2J1amdUaU45bjQxRU5TQ1hxTnkvck9BT1g1WlMxQ2FVQzJkQTdRcXkzQkZmUEV6N3hoaVYKOFQ3ZmtvaDkzN0s2ak55ek1GUHZzUjBxOFA3dWpFK1lEVnBTRWNOSWViWDRTVWxOL2FoWkZCZmVMK2t1OEtuYwpNU1F5a3Bnby8vUENnSTdpaGZxQmdHSHJ5K0ZaQWdNQkFBR2pXVEJYTUE0R0ExVWREd0VCL3dRRUF3SUNwREFQCkJnTlZIUk1CQWY4RUJUQURBUUgvTUIwR0ExVWREZ1FXQkJUL1k5d0tSZ1UwNEdUNWxOSHI2MDU1NFNibzJUQVYKQmdOVkhSRUVEakFNZ2dwcmRXSmxjbTVsZEdWek1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQ1Y3dFh6d1JzMQoySUFraW0zOWdCN2xpSlJCTWRNbWM5VGhPcmhSM2xmeC9zYUJrcDVQVWQ3OVNPdjduOCtLRFltUFJrY29qNzcvCnlmRldGakdPRmV4SlVYbFBWa3VtbW1NUk5GOTNzYTQwVUEwaGUwVzhDNWE4Z1orUzZVTHdnZlBITys4SkRsVWcKSmpySWk3NnRualZnSXVKTGpDcE9TbkhsYXhySGJ2MVN4ZlMrckszQmZjMlc4MjFNQmRrcWtOdzNjT3FzMUEvdwpOVFNsa2k4YmtyaElOWVRuYlovemZmQmFFOVVZT2RxYjdZdGcvV1hxK1RLK1A3V2hkTVVTL0t2eS9waU9KNG1WCjRxUDJCejJ3NjRHUVEyTHNLZHdSeDB4Z0k5cWhlN3FzRi9uV3VWOTdVTXRlU2tIYURrNzVCdlBwZ25oVnB6QWwKcm5Hb3NSOVJmQVBZCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
            server: https://192.168.65.3:6443
          name: docker-desktop
      contexts:
        - context:
            cluster: docker-desktop
            namespace: test
            user: docker-desktop
          name: docker-desktop
      current-context: docker-desktop
      kind: Config
      preferences: {}
      users:
        - name: docker-desktop
          user:
            client-certificate-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRakNDQWlxZ0F3SUJBZ0lJVUc1Rjc4cSt1U2d3RFFZSktvWklodmNOQVFFTEJRQXdGVEVUTUJFR0ExVUUKQXhNS2EzVmlaWEp1WlhSbGN6QWVGdzB5TkRBM01UZ3dPREV4TkRoYUZ3MHlOVEEzTVRnd09ERTJORGxhTURZeApGekFWQmdOVkJBb1REbk41YzNSbGJUcHRZWE4wWlhKek1Sc3dHUVlEVlFRREV4SmtiMk5yWlhJdFptOXlMV1JsCmMydDBiM0F3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRQ3oxaUxHellxQWMxMlUKWjRxYnNPb3dQTDg0VUp6dWJWL2VlK3kyQVI0Zk5pR3BNVzFkZkZOQ3JiQ3d3Slcra2FLS1ZkdDNPNGh5YmlobApIRk14dzVlRFhvUFhtOFNuZFhTL1hNV2d4Y05jaXFic0ZSMWp2MXFxK1hMa3dGNHE1eWVpVU1jZHFGK2hEMGZoCkNqQlhLVUlZZDcrSEZqRjFMZ2l5WVdoNFFNcHpxbnpCVmRYKzRhb0Mrdk0vRFp0cTZORlk2RXI4YzJJRDd1MVIKaVpDOVRCa0svZDVuNDM0Q1ZhTFlvQjYxNFJ3SFJzUzI0N1RKZ1ppalc0TEYwSEQzNjBZOUFiZmJ2eXVzV3FJZwo3R1FaTzl4Z3RmSVh2dFo5TDhNVkt5ZlB4a0VOd1prUDR0NkJyMXlQNEUybGtJYlhLSk5TUWhadFYydmx0ZUFNCmtnaWFvTWlyQWdNQkFBR2pkVEJ6TUE0R0ExVWREd0VCL3dRRUF3SUZvREFUQmdOVkhTVUVEREFLQmdnckJnRUYKQlFjREFqQU1CZ05WSFJNQkFmOEVBakFBTUI4R0ExVWRJd1FZTUJhQUZQOWozQXBHQlRUZ1pQbVUwZXZyVG5uaApKdWpaTUIwR0ExVWRFUVFXTUJTQ0VtUnZZMnRsY2kxbWIzSXRaR1Z6YTNSdmNEQU5CZ2txaGtpRzl3MEJBUXNGCkFBT0NBUUVBWlRoUm00Z0tpWVlMTzZsN3FvMWFrckRNOWtzZW9ZVjhFNGN3OUhxcVE5YnVTcTRSQ0NxTkh6Q2sKaFVUVFNUUXhPUTE3YkthblJQYklGNytPMGo5eDJNNW5SQ05yby8vQ291bGFPNTZGOU0zeFZRaGdxTmNSQytUTAp6NzZ5ZjlYM25GdkljZlhwMkFBUVBTczQ0UUZRbTJXamtEaFhRVmFrb05KUzAzeEttM2pFeFA3c21lU3R2MllCClY4MVo2amttMTFGUEF6ci9Fbkd3QU93eEtwQ3Nra3I0V25VRGxqTDBqenh2eUNZR3BIRUtUbGdRMHI0djJOYlkKZlN1WnE5TVdKbzY0MmV6QVA1cVRJdFliRGJnaVQ0TE5nYjk0dEdqQktyMzBmOFppeVBhWW1qdldjc2RYOXlQKwpESnhmcXhzR3RTOHZ0YjJVNnRlMUtjY0U5QWMybGc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
            client-key-data: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBczlZaXhzMktnSE5kbEdlS203RHFNRHkvT0ZDYzdtMWYzbnZzdGdFZUh6WWhxVEZ0ClhYeFRRcTJ3c01DVnZwR2lpbFhiZHp1SWNtNG9aUnhUTWNPWGcxNkQxNXZFcDNWMHYxekZvTVhEWElxbTdCVWQKWTc5YXF2bHk1TUJlS3Vjbm9sREhIYWhmb1E5SDRRb3dWeWxDR0hlL2h4WXhkUzRJc21Gb2VFREtjNnA4d1ZYVgovdUdxQXZyelB3MmJhdWpSV09oSy9ITmlBKzd0VVltUXZVd1pDdjNlWitOK0FsV2kyS0FldGVFY0IwYkV0dU8wCnlZR1lvMXVDeGRCdzkrdEdQUUczMjc4cnJGcWlJT3hrR1R2Y1lMWHlGNzdXZlMvREZTc256OFpCRGNHWkQrTGUKZ2E5Y2orQk5wWkNHMXlpVFVrSVdiVmRyNWJYZ0RKSUltcURJcXdJREFRQUJBb0lCQUZKWExvOG1GMDlmQXk3cgpCYXpwb1NDNi83YlNPamgwL2R0SmxJVjFGNHlrNVY2cGtmQ205eHhsbUt3bFVhcnkxYUJQVlhCUFl0YzZGdWJNCnhFN1p4bXJSQUw3Y3hIc0VMWk5jNytRQUNNWTdlZGhJaHE5Z015eHJrSzZxWWJOMUtWR0plTkhjZ1FTbWtYdTUKaFk2ekJsOWJuT2RHUXhqckhmSkc1V1dDRFBCT0Q5TnNmaDdZd3dHT0RVVDlicTJPbThzMmdwK1FjYmZES1ovWQp6a3NXaTFINnlDTW93MmlXWkxvdzAzcXV5ZWgzSGhYVllZckRveXNDWEFta2FvWk4ydkw2R1VPTWtwdHpVamdhCnRQTzhySUZteHVEcEFBM3piek1aVW16N2RrQ0JlL0JvR0l0RUhEdk4vaGROenNMN2djYjFTNkl2U0pXeFdtYVMKWXZOSndGa0NnWUVBMmo2Nkd5RkFSN3Z1MzNxRGh2NlJZQkM3eFZ3T2pCZnplQXQrMUNvVnhFUFVJS2laMmJRMQp2d1FicGtucnk5bXB2SWt3RkptZDZmMGtzSlpYUTAxbDAxdnFKVUpFVnYwUVVWKy9BZWtueUFzdVRmVmN4VENrCnA2MXNueFVCcTNJcmF2d1RMbHY0UGZsYmlFSy9id2ViVmVQTlE5SlN4Ynd0NnhXVGZ1aGh1TDBDZ1lFQTB2SnYKTjZBTlc1cHk5M281czBiaTg5c01BcXQzalEzSTBqK0RCTkhCdzVIdlpQUVk5eld6ZG1LVnp4UW84Smx3MmhubApmUHhLVUpwTzlLK3BVKzU2alZQdW5KTmZiVUpSNzg4dnRrMlZRQnVYVWNJaUxUajF0SFAzR2RoWTF3OTh0L3FjCkFYQjhxSkRyanJ0UU1VREUxUTRZSGJZZFNpQlZ0d3VEbEdmb0lZY0NnWUVBMmJaVGJ6YjNhZGYzVGlab1NPVncKWGxXekN3bHZWWithK0RqM2QyellNK2E2R1M0MzgrNEs0NWVVZ1lraVdVTzBTR2pPZHU1YmtvMDk2WTdBVkZwRQpadGs5TlpmcWxxQnlnOHF3djVZNFloMk5QcVd5dXQ5d2tmaTE3K2hEdHlUNFhReERraTZhOEMvdGVIdWxmbnduCklFSlVoUUN1STZVNlpWWXJ3aUROUXowQ2dZQU1lQ3crMjRVdW53aWd2R2JneEJYeVdFWnplZk5OTVQxbndEMWMKY1pIRW44SEk4K3p0NEF6RnVMb21UWWpHQUN2OW1INUtUeGVOZ0RHZW9TdWZQSCtlRHhJUnkxeGV0d2JrNkJobgo3Rm9nT2dGTjRlM25RbkN6eEE4ZFJmNnFaODMxaWlqaXBPV1ppVWVEWG1zMUhpRUVmeHJKMXRRUVo2enBieExPCkdQNU56UUtCZ0FGVld6MjJBbDM5RlV1R1A5UWFCMXI3TlNnR1lzY0tzdmJPVDhEWXNpQnBkOEJqWm9iT0tZWmkKWWhFbnpjSWcrNlUrK0lSdnZhalpaekVBUTRZL3dMcmE3VGc3cXJIQWE1Mnk1TjdLNytEdngrOUNSWVpQV3llegpHdUJpUnJNMTI2MjBZMGkxSDM2MFIxWmhzSjRzdjdTZGRyWGJKNXFHUzlMeTMzL0VIRU53Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
    

    ## Proxy configuration section
  ## This section is dedicated to configuring the proxy settings for your deployment.
  ## The proxy acts as an intermediary for requests from clients seeking resources from other servers.
  proxy:
    ## Enable or disable the proxy component.
    enabled: true

    ## Number of proxy replicas to deploy for handling incoming requests.
    replicas: 1

    image:
      ## The repository where the proxy image is stored.
      repository: registry.cn-beijing.aliyuncs.com/opencsg_public/csghub_server
      ## The tag of the proxy image to use.
      tag: "v0.5.0"
      ## The pull policy for the proxy image. Determines when the image should be pulled.
      pullPolicy: "IfNotPresent"
      ## Secrets used to pull images from a private registry. Empty if not using a private registry or not required.
      # pullSecret: [ ]

    service:
      ## The type of service to expose the proxy. ClusterIP exposes the service on a cluster-internal IP.
      type: ClusterIP
      ## The port on which the proxy service is exposed within the cluster.
      port: 8083

  ## Builder configuration section
  ## This section is dedicated to configuring the builder settings for your deployment.
  ## The builder is responsible for building and compiling your application from source code.
  ## Here, you can specify settings related to the Docker registry, Redis, and other build tools.
  builder:
    ## Redis configuration for the builder
    ## This subsection allows you to specify the host, port, and password for Redis.
    ## Enable the builder component
    enabled: true

    ## Number of replicas for the builder
    replicas: 1

    image:
      ## Repository for the builder image
      repository: registry.cn-beijing.aliyuncs.com/opencsg_public/csghub-space-builder
      ## Tag for the builder image
      tag: "v0.5.0"
      ## Pull policy for the builder image
      pullPolicy: "IfNotPresent"
      ## Secrets for pulling the builder image from a private registry
      pullSecret: [ ]

    service:
      ## Type of service for the builder component
      type: ClusterIP
      ## Port for the builder service
      port: 8080

    ingress:
      ## Hostname for accessing the building application externally
      host: public.msens.cn

    internal:
      ## Internal domain name for the builder component
      domain: app.internal
      ## Internal port for the builder component
      port: 80

    redis:
      ## Hostname for the Redis instance used by the builder
      # host: ""
      ## Port for the Redis instance
      # port: ""
      ## Password for the Redis instance
      # password: ""

    ## Docker Registry configuration for the builder
    ## This subsection allows you to specify the repository, namespace, username, and password for the Docker registry.
    ## The Docker registry is where your Docker images will be stored and managed.
    # registry: {}
      # repository: docker.io
      # namespace: csghub
      # username: ""
      # password: ""

    securityContext:
      ## User ID to run the builder pod as
      runAsUser: 0
      ## Group ID to run the builder pod as
      runAsGroup: 0
      ## Filesystem group ID for the builder pod
      fsGroup: 0

    podSecurityContext:
      ## Allow the builder pod to run as privileged
      privileged: true
      ## Allow privilege escalation within the builder pod
      allowPrivilegeEscalation: true
      ## Set the root filesystem of the builder pod to read-only
      readOnlyRootFilesystem: false

    persistence:
      ## Enable persistence for the builder component
      enabled: true
      ## Storage class for the persistent volume claim
      storageClass: ""
      ## Access mode for the persistent volume
      accessMode:
        - ReadWriteOnce
      ## Size of the persistent volume
      size: 1Gi

  ## Gitea's configuration section
  ## This section allows you to configure the Gitea settings for your deployment.
  ## Gitea is an open-source git server written in Go. It is a community-managed lightweight code hosting solution that is easy to install and setup.
  ## You can customize Gitea to match your organizational needs, including repository management, issue tracking, and code review.
  gitea:
    enabled: true

    ## Gitea image configuration
    ## Here you can specify the repository, pull policy, and tag for the Gitea image.
    image:
      repository: git-devops.opencsg.com:5050/product/starhub/bitnami-gitea # The repository where the Gitea image is stored
      pullPolicy: IfNotPresent # The pull policy for the image
      ## Overrides the image tag whose default is the chart appVersion.
      tag: "v0.7" # The specific version tag of the Gitea image
      ## Image pull secrets for accessing private Docker registries
      ## This is necessary if your Gitea image is stored in a private repository that requires authentication.
      pullSecrets:
        - name: csghub-registry-credential

    service:
      type: ClusterIP
      ports: {}
    ## Authentication details for accessing external services or registries
    ## This section is commented out by default. Uncomment and fill in your details if needed.
    # authentication: {}
    #   username: ""
    #   password: ""
    #   email: ""

    ## Configuration for PostgreSQL database connection
    ## Gitea requires a database to store its data. This section allows you to configure the connection to a PostgreSQL database.
    ## Uncomment and fill in your database connection details.
    postgresql: {}
    #   host: ""
    #   port: ""
    #   database: ""
    #   username: ""
    #   password: ""
    #   ssl: ""

    ## Configuration for S3 storage connection
    ## Gitea can use S3 (or compatible) storage for repository data. Configure your S3 connection details here.
    ## Uncomment and fill in your S3 storage details.
    objectStorage: {}
    #   type: ""
    #   endpoint: ""
    #   accessKey: ""
    #   accessSecret: ""
    #   bucket: ""
    #   region: ""

    ## Configure SMTP to support email sending
    ## Gitea can send emails for notifications, account recovery, etc. Configure your SMTP server details here.
    smtp:
      enabled: false # Enable or disable SMTP
      #    from: ""
      #    host: ""
      #    port: ""
      #    user: ""
      #    password: ""

    ## Configuration for ingress
    ingress:
      ## Enable ingress (true or false)
      enabled: true
      ## The hostname for the ingress
      host: gitea.msens.cn

    ## Configuration for persistence using Persistent Volume Claims
    persistence:
      ## Enable persistence (true or false)
      enabled: true
      ## Persistent Volume Storage Class
      ## If defined, storageClassName: <storageClass>
      ## If set to "-", storageClassName: "", which disables dynamic provisioning
      ## If undefined (the default) or set to null, no storageClassName spec is
      ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
      ##   GKE, AWS & OpenStack)
      # storageClass: ''
      ## Access mode for the Persistent Volume
      accessMode:
        - ReadWriteOnce
      ## Size of the Persistent Volume
      size: 1Gi

    ## Enable debug mode (true or false)
    debug: false

    ## Configuration for security context
    securityContext:
      ## User ID to run the pod as
      runAsUser: 0
      ## Group ID to run the pod as
      runAsGroup: 0
      ## Filesystem group ID
      fsGroup: 0

    ## Configuration for pod security context
    podSecurityContext:
      ## Allow the pod to run in privileged mode (true or false)
      privileged: true
      ## Allow privilege escalation (true or false)
      allowPrivilegeEscalation: true
      ## Set the root filesystem of the pod to read-only (true or false)
      readOnlyRootFilesystem: false

  ## PostgreSQL's configuration section
  ## This section is dedicated to configuring the PostgreSQL database settings for your deployment.
  postgresql:
    ## Enable or disable the PostgreSQL deployment
    enabled: true

    ## Number of replicas for the PostgreSQL deployment
    replicas: 1

    image:
      ## The repository from which the PostgreSQL image is pulled
      repository: postgres
      ## The tag of the PostgreSQL image to use
      tag: "15.7"
      ## The pull policy for the PostgreSQL image
      pullPolicy: "IfNotPresent"
      ## Image pull secrets for accessing private Docker registries
      # pullSecret: [ ]

    service:
      ## The type of service to expose PostgreSQL
      type: ClusterIP
      ## The port on which the PostgreSQL service is exposed
      port: 5432

    parameters:
      ## Set the timezone for the PostgreSQL database
      timezone: "Asia/Shanghai"

    persistence:
      ## Enable persistence using Persistent Volume Claims
      enabled: true
      ## PostgreSQL's data Persistent Volume Storage Class
      ## If defined, storageClassName: <storageClass>
      ## If set to "-", storageClassName: "", which disables dynamic provisioning
      ## If undefined (the default) or set to null, no storageClassName spec is
      ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
      ##   GKE, AWS & OpenStack)
      storageClass: ""
      ## Access mode for the Persistent Volume
      accessMode:
        - ReadWriteOnce
      ## Size of the Persistent Volume
      size: 1Gi

  ## Redis configuration section
  ## This section allows you to configure Redis settings for your deployment.
  redis:
    ## Enable or disable the Redis component.
    enabled: true
    ## Number of Redis replicas to deploy.
    replicas: 1

    image:
      ## The repository of the Redis image.
      repository: redis
      ## The tag of the Redis image.
      tag: "7.2.5"
      ## The pull policy for the Redis image.
      pullPolicy: "IfNotPresent"
      ## Image pull secrets for accessing private Docker registries.
      # pullSecret: [ ]

    service:
      ## The type of service to expose Redis.
      type: ClusterIP
      ## The port on which the Redis service is exposed.
      port: 6379
    ## Password for Redis authentication. Leave it as an empty string if no password is required.
    # authentication: {}
      # password: ""

    persistence:
      ## Enable or disable persistence using Persistent Volume Claims.
      enabled: true
      ## The storage class to use for persistence. Use an empty string to use the default storage class.
      # storageClass: ""
      ## The access mode of the storage. ReadWriteOnce means the volume can be mounted as read-write by a single node.
      accessMode:
        - ReadWriteOnce
      ## The size of the persistent volume.
      size: 1Gi

  ## Minio configuration section
  ## Minio is a high-performance distributed object storage server, compatible with Amazon S3 cloud storage service.
  minio:
    enabled: true
    replicas: 1
    image:
      ## The repository and tag of the Minio image to use.
      repository: minio/minio
      tag: "RELEASE.2024-07-15T19-02-30Z"
      ## Image pull policy and secrets for accessing private Docker registries.
      pullPolicy: "IfNotPresent"
      # pullSecret: [ ]

    service:
      ## Service type and ports configuration for Minio API and Console.
      type: ClusterIP
      ports:
        api: 9000
        console: 9001

    ## List of default buckets to be created upon Minio deployment.
    buckets: {}

    ## The region where Minio will operate, useful for configuring location-specific data replication and redundancy.
    region: "cn-north-1"

    ## Authentication credentials for accessing Minio. It's crucial to replace these placeholders with actual secure values.
    # authentication: {}
    #   username: ""
    #   password: ""

    ingress:
      ## Ingress configuration for accessing Minio from outside the Kubernetes cluster.
      enabled: true
      host: minio.msens.cn

    persistence:
      ## Persistence settings for Minio data. Ensures data is retained across pod restarts.
      enabled: true
      # storageClass: ""
      accessMode:
        - ReadWriteOnce
      size: 1Gi

  ## Registry configuration section
  ## This section is dedicated to configuring the Docker Registry settings for your deployment.
  registry:
    enabled: true
    ## Number of replicas for the Docker Registry deployment
    replicas: 1
    image:
      ## The Docker Registry image repository
      repository: registry
      ## The Docker Registry image tag
      tag: "2.8.3"
      ## The pull policy for the Docker Registry image
      pullPolicy: "IfNotPresent"
      ## Image pull secrets for accessing private Docker registries
      # pullSecret: [ ]

    service:
      ## The type of service to expose the Docker Registry
      type: NodePort
      ## The port on which the Docker Registry service is exposed
      nodePort: 32500

    ## Default registry repository
    namespace: "space"

    # authentication: {}
      ## Username for Docker Registry authentication
      # username: ""
      ## Password for Docker Registry authentication
      # password: ""

    ingress:
      ## Enable ingress for the Docker Registry
      enabled: true
      ## Hostname for the Docker Registry ingress
      host: registry.msens.cn
      tls:
        enabled: true
        secretName: test-registry-tls-secret

    persistence:
      ## Enable persistence using Persistent Volume Claims
      enabled: true
      ## Persistent Volume Storage Class for Docker Registry data
      # storageClass: ""
      ## Access mode for the Persistent Volume
      accessMode:
        - ReadWriteOnce
      ## Size of the Persistent Volume
      size: 10Gi

  ## CoreDNS configuration section
  ## This section allows you to enable or disable the CoreDNS service for your deployment.
  ## CoreDNS is a flexible, extensible DNS server that can serve as the Kubernetes cluster DNS.
  ## Here, you can simply enable or disable CoreDNS without specifying further configuration details.
  coredns:
    enabled: true
    ## Number of replicas for the Docker Registry deployment
    replicas: 1
    image:
      ## The Docker Registry image repository
      repository: coredns/coredns
      ## The Docker Registry image tag
      tag: "1.11.1"
      ## The pull policy for the Docker Registry image
      pullPolicy: "IfNotPresent"
      ## Image pull secrets for accessing private Docker registries
      # pullSecret: [ ]

ingress-nginx:
  controller:
    service:
      <<: *service
  tcp:
    <<: *tcp