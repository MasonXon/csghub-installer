# Default values for csghub.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
global:

  ## This section is for configuring image pull secrets.
  ## Image pull secrets are used to pull Docker images from private repositories.
  ## You can specify multiple secrets if necessary.
  imagePullSecrets:
    - name: csghub-registry-credential

  ## Ingress configuration section
  ## This section allows you to configure ingress settings for your deployment.
  ## Ingress exposes HTTP and HTTPS routes from outside the cluster to services within the cluster.
  ## Traffic routing is controlled by rules defined on the ingress resource.
  ingress:
    enabled: true
    className: "nginx"

    ## External configuration section
    ## This section allows you to configure external access settings.
    ## Here, you can specify the host (domain) and port for external access to your deployment.
    ## Note: The 'external' settings override the 'server' settings for domain and port.
    external:
      ## The host (domain) name for external access
      domain: example.com
      ## The port number for external access

    ## Configure this section to adjust the port exposure method.
    ## The optional methods are NodePort or LoadBalancer.
    ## It should be noted that no matter which method is used, do not comment the nodePorts parameter below
    service: &service
      ## The optional methods are `NodePort` or `LoadBalancer`.
      type: NodePort
      ## Although this part of the configuration has no effect in theory when configured as LoadBalancer,
      ## a cross configuration is made here to simplify the configuration
      nodePorts:
        ## If it is a NodePort, just keep default
        http: "30080"
        ## If it is a NodePort, just keep default
        https: "30443"
        ## Regardless of the service type, tcp cannot be commented, otherwise git over ssh may be disabled.
        tcp: &tcp
          ## If it is a LoadBalancer configure the port to 22, else the NodePort to 2222
          ## eg: service.type = NodePort      2222: "32222"
          ## eg: service.type = LoadBalancer  22: "32222"
          2222: "32222"

    # TLS configuration for secure communication
    tls:
      enabled: false
      verify: false
      autoGenerated: false
      secretName: ""
      caSecretName: ""

    annotations: {}

  ## Server configuration section
  ## This section allows you to configure the server settings for your deployment.
  ## You can specify the service type, port, and other relevant settings to ensure
  ## your server operates according to your requirements.
  server:
    ## Server configuration section
    ## This section allows you to configure the server settings for your deployment.
    enabled: true

    ## Number of server instances to deploy for handling incoming requests
    replicas: 1

    image:
      ## The Docker image repository
      repository: git-devops.opencsg.com:5050/product/starhub/starhub-server
      ## The specific image tag to use
      tag: 154a7959
      ## The image pull policy
      pullPolicy: "IfNotPresent"
      ## List of secrets used to pull images from private repositories
      # pullSecret: [ ]

    service:
      ## The type of service to expose
      type: ClusterIP
      ## The port on which the server service is exposed
      port: 8080

    postgresql:
      ### PostgreSQL database connection configuration
      ## The hostname or IP address of the PostgreSQL server
      # host: ""
      ## The port on which the PostgreSQL server is listening
      port: 5432
      ## The username used to authenticate with the PostgreSQL server
      # user: ""
      ## The password used to authenticate with the PostgreSQL server
      # password: ""
      ## The name of the database to connect to on the PostgreSQL server
      # database: ""
      ## Timezone
      # timezone: ""

    ## Configuration for S3 storage connection
    ## Server can use S3 (or compatible) storage for repository data. Configure your S3 connection details here.
    ## Uncomment and fill in your S3 storage details.
    objectStorage: { }
    #   type: ""
    #   endpoint: ""
    #   accessKey: ""
    #   accessSecret: ""
    #   bucket: ""
    #   region: ""

  ## Portal configuration section
  ## This section is dedicated to configuring the portal component of your deployment.
  ## The portal serves as the front-end user interface, facilitating user interaction with your application.
  portal:
    enabled: true

    ## Number of portal replicas to deploy for handling incoming traffic and ensuring high availability.
    replicas: 1

    image:
      ## The repository where the portal image is stored.
      repository: git-devops.opencsg.com:5050/product/community/open-portal
      ## The specific version tag of the portal image to use.
      tag: v0.3.3
      ## The pull policy for the portal image, specifying when to pull the image from the repository.
      pullPolicy: "IfNotPresent"
      ## Secrets used to pull images from a private repository. Leave empty if not required.
      pullSecret: [ ]

    ## Configuration for the PostgreSQL database connection.
    postgresql:
      ## The hostname or IP address of the PostgreSQL server.
      # host: ""
      ## The port on which the PostgreSQL server is listening.
      port: 5432
      ## The username for authenticating with the PostgreSQL database.
      # user: ""
      ## The password for authenticating with the PostgreSQL database.
      # password: ""
      ## The name of the database to use within the PostgreSQL server.
      # database: ""

    ## Configuration for S3 storage connection
    ## Portal can use S3 (or compatible) storage for repository data. Configure your S3 connection details here.
    ## Uncomment and fill in your S3 storage details.
    objectStorage: {}
    #   type: ""
    #   endpoint: ""
    #   accessKey: ""
    #   accessSecret: ""
    #   bucket: ""
    #   region: ""

  ## Runner configuration section
  ## This section is dedicated to configuring the runner settings for your deployment.
  ## Runners are components that execute your jobs and send the results back to your application.
  runner:
    ## Enable or disable the runner feature
    enabled: true

    ## Number of runner replicas to deploy for handling jobs
    replicas: 1

    image:
      ## The repository where the runner image is stored
      repository: git-devops.opencsg.com:5050/product/starhub/starhub-server
      ## The tag of the runner image to use
      tag: 154a7959
      ## The pull policy for the runner image
      ## Determines when the image should be pulled from the repository
      pullPolicy: "IfNotPresent"
      ## Image pull secrets, if required, for accessing private image repositories
      pullSecret: [ ]

    ## Kubernetes namespace where the builder component will be deployed
    namespace: space

    service:
      ## The type of service to expose the runner
      ## ClusterIP exposes the service on a cluster-internal IP
      type: ClusterIP
      ## The port on which the runner service is exposed within the cluster
      port: 8082

    ## .kube/config
    kubeConfig: |

  ## Proxy configuration section
  ## This section is dedicated to configuring the proxy settings for your deployment.
  ## The proxy acts as an intermediary for requests from clients seeking resources from other servers.
  proxy:
    ## Enable or disable the proxy component.
    enabled: true

    ## Number of proxy replicas to deploy for handling incoming requests.
    replicas: 1

    image:
      ## The repository where the proxy image is stored.
      repository: git-devops.opencsg.com:5050/product/starhub/starhub-server
      ## The tag of the proxy image to use.
      tag: 154a7959
      ## The pull policy for the proxy image. Determines when the image should be pulled.
      pullPolicy: "IfNotPresent"
      ## Secrets used to pull images from a private registry. Empty if not using a private registry or not required.
      # pullSecret: [ ]

    service:
      ## The type of service to expose the proxy. ClusterIP exposes the service on a cluster-internal IP.
      type: ClusterIP
      ## The port on which the proxy service is exposed within the cluster.
      port: 8083

  ## Builder configuration section
  ## This section is dedicated to configuring the builder settings for your deployment.
  ## The builder is responsible for building and compiling your application from source code.
  ## Here, you can specify settings related to the Docker registry, Redis, and other build tools.
  builder:
    ## Redis configuration for the builder
    ## This subsection allows you to specify the host, port, and password for Redis.
    ## Enable the builder component
    enabled: true

    ## Number of replicas for the builder
    replicas: 1

    image:
      ## Repository for the builder image
      repository: opencsg-registry.cn-beijing.cr.aliyuncs.com/opencsg_public/csghub-space-builder
      ## Tag for the builder image
      tag: v0.8.0-pre
      ## Pull policy for the builder image
      pullPolicy: "IfNotPresent"
      ## Secrets for pulling the builder image from a private registry
      pullSecret: [ ]

    service:
      ## Type of service for the builder component
      type: ClusterIP
      ## Port for the builder service
      port: 8080

    ingress:
      enabled: true
      ## Hostname for accessing the building application externally
      tls:
        enabled: false
        secretName: ""

    internal:
      ## Internal domain name for the builder component
      - domain: app.internal
      ## Internal port for the builder component
        service:
          host: 192.168.18.8
          port: 80
      - domain: app2.internal
        service:
          host: 192.168.18.9
          port: 30446

    redis:
      ## Hostname for the Redis instance used by the builder
      # host: ""
      ## Port for the Redis instance
      # port: ""
      ## Password for the Redis instance
      # password: ""

    ## Docker Registry configuration for the builder
    ## This subsection allows you to specify the repository, namespace, username, and password for the Docker registry.
    ## The Docker registry is where your Docker images will be stored and managed.
    # registry: {}
      # repository: docker.io
      # namespace: csghub
      # username: ""
      # password: ""

    securityContext:
      ## User ID to run the builder pod as
      runAsUser: 0
      ## Group ID to run the builder pod as
      runAsGroup: 0
      ## Filesystem group ID for the builder pod
      fsGroup: 0

    podSecurityContext:
      ## Allow the builder pod to run as privileged
      privileged: true
      ## Allow privilege escalation within the builder pod
      allowPrivilegeEscalation: true
      ## Set the root filesystem of the builder pod to read-only
      readOnlyRootFilesystem: false

    persistence:
      ## Enable persistence for the builder component
      enabled: true
      ## Storage class for the persistent volume claim
      storageClass: ""
      ## Access mode for the persistent volume
      accessMode:
        - ReadWriteOnce
      ## Size of the persistent volume
      sizes:
        builder: "2Gi"
        docker: "10Gi"

  ## Gitea's configuration section
  ## This section allows you to configure the Gitea settings for your deployment.
  ## Gitea is an open-source git server written in Go. It is a community-managed lightweight code hosting solution that is easy to install and setup.
  ## You can customize Gitea to match your organizational needs, including repository management, issue tracking, and code review.
  gitea:
    enabled: true

    ## Gitea image configuration
    ## Here you can specify the repository, pull policy, and tag for the Gitea image.
    image:
      repository: opencsg-registry.cn-beijing.cr.aliyuncs.com/opencsg_public/csghub_git
      pullPolicy: IfNotPresent # The pull policy for the image
      ## Overrides the image tag whose default is the chart appVersion.
      tag: v0.7.0 # The specific version tag of the Gitea image
      ## Image pull secrets for accessing private Docker registries
      ## This is necessary if your Gitea image is stored in a private repository that requires authentication.
      pullSecrets: []

    service:
      type: ClusterIP
      ports: {}
    ## Authentication details for accessing external services or registries
    ## This section is commented out by default. Uncomment and fill in your details if needed.
    # authentication: {}
    #   username: ""
    #   password: ""
    #   email: ""

    ## Configuration for PostgreSQL database connection
    ## Gitea requires a database to store its data. This section allows you to configure the connection to a PostgreSQL database.
    ## Uncomment and fill in your database connection details.
    postgresql: {}
    #   host: ""
    #   port: ""
    #   database: ""
    #   username: ""
    #   password: ""
    #   ssl: ""

    ## Configuration for S3 storage connection
    ## Gitea can use S3 (or compatible) storage for repository data. Configure your S3 connection details here.
    ## Uncomment and fill in your S3 storage details.
    objectStorage: {}
    #   type: ""
    #   endpoint: ""
    #   accessKey: ""
    #   accessSecret: ""
    #   bucket: ""
    #   region: ""

    ## Configure SMTP to support email sending
    ## Gitea can send emails for notifications, account recovery, etc. Configure your SMTP server details here.
    smtp:
      enabled: false # Enable or disable SMTP
      #    from: ""
      #    host: ""
      #    port: ""
      #    user: ""
      #    password: ""

    ## Configuration for persistence using Persistent Volume Claims
    persistence:
      ## Enable persistence (true or false)
      enabled: true
      ## Persistent Volume Storage Class
      ## If defined, storageClassName: <storageClass>
      ## If set to "-", storageClassName: "", which disables dynamic provisioning
      ## If undefined (the default) or set to null, no storageClassName spec is
      ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
      ##   GKE, AWS & OpenStack)
      # storageClass: ''
      ## Access mode for the Persistent Volume
      accessMode:
        - ReadWriteOnce
      ## Size of the Persistent Volume
      size: 1Gi

    ## Enable debug mode (true or false)
    debug: false

    ## Configuration for security context
    securityContext:
      ## User ID to run the pod as
      runAsUser: 0
      ## Group ID to run the pod as
      runAsGroup: 0
      ## Filesystem group ID
      fsGroup: 0

    ## Configuration for pod security context
    podSecurityContext:
      ## Allow the pod to run in privileged mode (true or false)
      privileged: true
      ## Allow privilege escalation (true or false)
      allowPrivilegeEscalation: true
      ## Set the root filesystem of the pod to read-only (true or false)
      readOnlyRootFilesystem: false

  ## PostgreSQL's configuration section
  ## This section is dedicated to configuring the PostgreSQL database settings for your deployment.
  postgresql:
    ## Enable or disable the PostgreSQL deployment
    enabled: true

    ## Number of replicas for the PostgreSQL deployment
    replicas: 1

    image:
      ## The repository from which the PostgreSQL image is pulled
      repository: opencsg-registry.cn-beijing.cr.aliyuncs.com/opencsg_public/postgres
      ## The tag of the PostgreSQL image to use
      tag: 15.7
      ## The pull policy for the PostgreSQL image
      pullPolicy: "IfNotPresent"
      ## Image pull secrets for accessing private Docker registries
      # pullSecret: [ ]

    service:
      ## The type of service to expose PostgreSQL
      type: ClusterIP
      ## The port on which the PostgreSQL service is exposed
      port: 5432

    parameters:
      ## Set the timezone for the PostgreSQL database
      timezone: "Asia/Shanghai"

    persistence:
      ## Enable persistence using Persistent Volume Claims
      enabled: true
      ## PostgreSQL's data Persistent Volume Storage Class
      ## If defined, storageClassName: <storageClass>
      ## If set to "-", storageClassName: "", which disables dynamic provisioning
      ## If undefined (the default) or set to null, no storageClassName spec is
      ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
      ##   GKE, AWS & OpenStack)
      storageClass: ""
      ## Access mode for the Persistent Volume
      accessMode:
        - ReadWriteOnce
      ## Size of the Persistent Volume
      size: 1Gi

  ## Redis configuration section
  ## This section allows you to configure Redis settings for your deployment.
  redis:
    ## Enable or disable the Redis component.
    enabled: true
    ## Number of Redis replicas to deploy.
    replicas: 1

    image:
      ## The repository of the Redis image.
      repository: opencsg-registry.cn-beijing.cr.aliyuncs.com/opencsg_public/redis
      ## The tag of the Redis image.
      tag: 7.2.5
      ## The pull policy for the Redis image.
      pullPolicy: "IfNotPresent"
      ## Image pull secrets for accessing private Docker registries.
      # pullSecret: [ ]

    service:
      ## The type of service to expose Redis.
      type: ClusterIP
      ## The port on which the Redis service is exposed.
      port: 6379
    ## Password for Redis authentication. Leave it as an empty string if no password is required.
    # authentication: {}
      # password: ""

    persistence:
      ## Enable or disable persistence using Persistent Volume Claims.
      enabled: true
      ## The storage class to use for persistence. Use an empty string to use the default storage class.
      # storageClass: ""
      ## The access mode of the storage. ReadWriteOnce means the volume can be mounted as read-write by a single node.
      accessMode:
        - ReadWriteOnce
      ## The size of the persistent volume.
      size: 1Gi

  ## Minio configuration section
  ## Minio is a high-performance distributed object storage server, compatible with Amazon S3 cloud storage service.
  minio:
    enabled: true
    replicas: 1
    image:
      ## The repository and tag of the Minio image to use.
      repository: opencsg-registry.cn-beijing.cr.aliyuncs.com/opencsg_public/minio/minio
      tag: RELEASE.2024-07-15T19-02-30Z
      ## Image pull policy and secrets for accessing private Docker registries.
      pullPolicy: "IfNotPresent"
      # pullSecret: [ ]

    service:
      ## Service type and ports configuration for Minio API and Console.
      type: ClusterIP
      ports:
        api: 9000
        console: 9001

    ## List of default buckets to be created upon Minio deployment.
    buckets: {}

    ## The region where Minio will operate, useful for configuring location-specific data replication and redundancy.
    region: "cn-north-1"

    ## Authentication credentials for accessing Minio. It's crucial to replace these placeholders with actual secure values.
    # authentication: {}
    #   username: ""
    #   password: ""

    persistence:
      ## Persistence settings for Minio data. Ensures data is retained across pod restarts.
      enabled: true
      # storageClass: ""
      accessMode:
        - ReadWriteOnce
      size: 1Gi

  ## Registry configuration section
  ## This section is dedicated to configuring the Docker Registry settings for your deployment.
  registry:
    enabled: true
    ## Number of replicas for the Docker Registry deployment
    replicas: 1
    image:
      ## The Docker Registry image repository
      repository: opencsg-registry.cn-beijing.cr.aliyuncs.com/opencsg_public/registry
      ## The Docker Registry image tag
      tag: 2.8.3
      ## The pull policy for the Docker Registry image
      pullPolicy: "IfNotPresent"
      ## Image pull secrets for accessing private Docker registries
      # pullSecret: [ ]

    service:
      ## The type of service to expose the Docker Registry
      type: NodePort
      ## The port on which the Docker Registry service is exposed
      nodePort: 32500

    ## Default registry repository
    namespace: "space"

    # authentication: {}
      ## Username for Docker Registry authentication
      # username: ""
      ## Password for Docker Registry authentication
      # password: ""

    ingress:
      tls:
        enabled: true
        secretName: test-registry-tls-secret

    persistence:
      ## Enable persistence using Persistent Volume Claims
      enabled: true
      ## Persistent Volume Storage Class for Docker Registry data
      # storageClass: ""
      ## Access mode for the Persistent Volume
      accessMode:
        - ReadWriteOnce
      ## Size of the Persistent Volume
      size: 10Gi

  ## CoreDNS configuration section
  ## This section allows you to enable or disable the CoreDNS service for your deployment.
  ## CoreDNS is a flexible, extensible DNS server that can serve as the Kubernetes cluster DNS.
  ## Here, you can simply enable or disable CoreDNS without specifying further configuration details.
  coredns:
    enabled: true
    ## Number of replicas for the Docker Registry deployment
    replicas: 1
    image:
      ## The Docker Registry image repository
      repository: opencsg-registry.cn-beijing.cr.aliyuncs.com/opencsg_public/coredns/coredns
      ## The Docker Registry image tag
      tag: 1.11.1
      ## The pull policy for the Docker Registry image
      pullPolicy: "IfNotPresent"
      ## Image pull secrets for accessing private Docker registries
      # pullSecret: [ ]

  # NATS Master configuration section
  # This section is reserved for configuring a NATS Master server if needed.
  # NATS is a simple, secure, and high performance open source messaging system for cloud native applications, IoT messaging, and microservices architectures.
  nats:
    image:
      ## Repository for the nats image
      repository: opencsg-registry.cn-beijing.cr.aliyuncs.com/opencsg_public/csghub_nats
      ## Tag for the nats image
      tag: 2.10.16

  # Account configuration section
  # This section can be used to configure account-related settings or parameters.
  account:
    image:
      ## Repository for the account image
      repository: git-devops.opencsg.com:5050/product/starhub/starhub-server
      ## Tag for the account image
      tag: 154a7959

  ## This configuration file outlines the deployment settings for a comprehensive software development platform.
  ## It includes configurations for various components such as Gitea, PostgreSQL, Redis, Minio, Docker Registry, CoreDNS, and more.
  ## Each section allows for customization to suit organizational needs, including security contexts, persistence settings, and service exposures.
  ## Ensure to review and adjust the settings according to your deployment environment and security policies.
  casdoor:
    enabled: true
    ## Number of replicas for the Docker Registry deployment
    replicas: 1
    image:
      ## The Docker Registry image repository
      repository: opencsg-registry.cn-beijing.cr.aliyuncs.com/opencsg_public/casbin/casdoor
      ## The Docker Registry image tag
      tag: v1.571.0
      ## The pull policy for the Docker Registry image
      pullPolicy: "IfNotPresent"
      ## Image pull secrets for accessing private Docker registries
      # pullSecret: [ ]

    service:
      ## The type of service to expose the Docker Registry
      type: ClusterIP
      ## The port on which the Docker Registry service is exposed
      nodePort: 8000

    ingress:
      tls:
        enabled: false
        secretName: ""

  ## User configuration section
  user:
    image:
      ## Repository for the user image
      repository: git-devops.opencsg.com:5050/product/starhub/starhub-server
      ## Tag for the user image
      tag: 154a7959

  ## This configuration file outlines the deployment settings for a comprehensive software development platform.
  ## It includes configurations for various components such as Gitea, PostgreSQL, Redis, Minio, Docker Registry, CoreDNS, and more.
  ## Each section allows for customization to suit organizational needs, including security contexts, persistence settings, and service exposures.
  ## Ensure to review and adjust the settings according to your deployment environment and security policies.
  fluent:
    elasticsearch:
      host: "127.0.0.1"
      port: 9200
      index: "csghub"

## Just keep default
ingress-nginx:
  controller:
    service:
      <<: *service
  tcp:
    <<: *tcp
