{{- /*
Copyright OpenCSG, Inc. All Rights Reserved.
SPDX-License-Identifier: APACHE-2.0
*/}}

{{- $conf := merge .Values.global.postgresql (omit .Values "global" "exports") }}
{{- if $conf.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "common.names.custom" . }}
  namespace: {{ .Release.Namespace }}
  labels: {{ include "common.labels" . | nindent 4 }}
  annotations:
    helm.sh/hook: post-install, post-upgrade
    helm.sh/hook-weight: "0"
    helm.sh/hook-delete-policy: before-hook-creation, hook-succeeded
    {{- with $conf.annotations }}
      {{- toYaml . | nindent 4 }}
    {{- end }}
spec:
  backoffLimit: 5
  activeDeadlineSeconds: 300
  template:
    metadata:
      name: {{ include "common.names.custom" . }}
      labels: {{ include "common.labels" . | nindent 8 }}
    spec:
      restartPolicy: OnFailure
      {{- with (or $conf.imagePullSecrets .Values.global.imagePullSecrets) }}
      imagePullSecrets:
        {{- range . }}
        - name: {{ . }}
        {{- end }}
      {{- end }}
      initContainers:
        - name: wait-for-postgresql
          image: {{ $conf.image.repository }}:{{ $conf.image.tag }}
          imagePullPolicy: {{ $conf.image.pullPolicy }}
          command: [ "sh", "-c", "until pg_isready -h {{ include "postgresql.internal.domain" . }} -p {{ include "postgresql.internal.port" . }} -U postgres; do echo 'Waiting for PostgreSQL can be connected'; sleep 3; done" ]
          env:
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "common.names.custom" . }}
                  key: postgres
      containers:
        - name: psql
          image: {{ $conf.image.repository }}:{{ $conf.image.tag }}
          imagePullPolicy: {{ $conf.image.pullPolicy }}
          command: [ "psql", "-h", "{{ include "postgresql.internal.domain" . }}", "-p", "{{ include "postgresql.internal.port" . }}", "-U", "postgres", "-d", "postgres", "-f", "/data/initialize.sql" ]
          env:
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "common.names.custom" . }}
                  key: postgres
          volumeMounts:
            - name: init
              mountPath: /data
      volumes:
        - name: init
          configMap:
            name: {{ include "common.names.custom" . }}
{{- end }}
